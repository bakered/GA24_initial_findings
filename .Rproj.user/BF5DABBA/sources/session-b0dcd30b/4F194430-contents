
library(tidytext)
library(ggplot2)
library(tidyr)
library(dplyr)
library(forcats)


getwd()

remove_list = c("Afghanistan", "Albania", "Algeria", "ASM", "ASM", "Andorra", "Angola", "Anguilla", "ATG", "ATG", "ATG", 
                "Argentina", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", 
                "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "BIH", 
                "BIH", "Botswana", "Brazil", "BRN", "BRN", "Bulgaria", "BFA", "BFA", "Burundi", "CPV", "CPV", "Cambodia", 
                "Cameroon", "Canada", "CYM", "CAF", "CAF", "Chad", "Chile", "China", "HKG", "Macau", "Colombia", "Comoros", 
                "cod", "cod", "cod", "cog", "cog", "cog", "COK", "COK", "CRI", "CRI", "Croatia", "CIV", "CIV", "CIV", "CIV", 
                "CIV", "CIV", "Cuba", "CUW", "Cyprus", "Czechia", "PRK", "PRK", "Denmark", "Djibouti", "DOM", "DOM", 
                "Ecuador", "Egypt", "SLV", "SLV", "GNQ", "GNQ", "Eritrea", "Estonia", "Eswatini", "Ethiopia", "FRO", "FRO", 
                "Fiji", "Finland", "France", "PYF", "FSM", "Gabon", "Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", 
                "Greece", "Greenland", "Grenada", "Guam", "Guatemala", "Guinea", "GNB", "GNB", "Guyana", "Haiti", "Honduras", 
                "Hungary", "Iceland", "India", "Indonesia", "Iran", "Iran", "Iraq", "Ireland", "Israel", "Italy", "Jamaica", 
                "Japan", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kuwait", "Kyrgyzstan", "Laos", "Laus", "Latvia", 
                "Lebanon", "Lesotho", "Liberia", "Libya", "Liechtenstein", "Lithuania", "Luxembourg", "Madagascar", 
                "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "MHL", "MHL", "Mauritania", "Mauritius", 
                "Mexico", "Monaco", "Mongolia", "Montenegro", "Montserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", 
                "Nauru", "Nepal", "Netherlands", "NCL", "NZL", "NZL", "Nicaragua", "Niger", "Nigeria", "Niue", "MKD", 
                "Norway", "Oman", "Pakistan", "Palau", "Panama", "PNG", "PNG", "Paraguay", "Peru", "Philippines", "Poland", 
                "Portugal", "Qatar", "KOR", "Moldova", "Romania", "Russia", "Russia", "Rwanda", "SHN", "KNA", "KNA", "LCA", 
                "SPM", "SPM", "SPM", "VCT", "Samoa", "SMR", "SMR", "STP", "STP", "SAU", "Saudi Arabia", "Senegal", "Serbia", 
                "Seychelles", "SLE", "SLE", "Singapore", "Slovakia", "Slovenia", "SLB", "SLB", "Somalia", "ZAF", "ZAF", 
                "SSD", "SSD", "Spain", "LKA", "LKA", "Palestine", "Palestine", "Sudan", "Suriname", "Sweden", "Switzerland", 
                "Syria", "Syria", "Tajikistan", "Thailand", "TLS", "TLS", "Togo", "Tokelau", "Tonga", "TTO", "TTO", "TTO", 
                "Tunisia", "TÃ¼rkiye", "Turkmenistan", "TCA", "TCA", "Tuvalu", "Uganda", "Ukraine", "ARE", "ARE", "GBR", "gbr", 
                "gbr", "gbr", "GBR", "TZA", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "VNM", "VNM", "WLF", "ESH", "ESH", 
                "Yemen", "Zambia", "Zimbabwe", "taiwan", "macedonian", "bosnia", "bissau", "antigua", "herzegovina", "congo",
                "pse", "ven", "dominica", "dominican", "tobago", "trinidad", "tanzania", "vincent", "grenadines") %>% tolower()

metadata <- read.csv("~/UN_projects/GA24/metadata.csv")
key = read.csv("~/UN_projects/GA24/multi_country_key.csv")
metadata$ISO2[metadata$ISO3=="NAM"] = "NA"

key$region %>% table()
colnames(key)

#metadata = metadata %>%
#  left_join(key %>% select(ISO3, unctad_development_status, UNCTAD_region, LDC, SIDS_UNCTAD_plus, LLDC), 
#            by = "ISO3") %>% 
#  mutate(region = case_when(
#    unctad_development_status=="developed" ~ "Developed",
#    UNCTAD_region=="America" ~ "LA&TC",
#    UNCTAD_region=="Africa" ~ "Africa",
#    UNCTAD_region=="Asia and Oceania" ~ "D'ing A&O",
#    TRUE~"other"
#  )) %>% 
#  select(-unctad_development_status, -UNCTAD_region)

metadata %>% filter(region=="Developed") %>% pull(ISO3) %>% dput()

# Get a list of all .txt files in the folder
transformed_txt_files <- list.files(path = "../transformed_txt_files/", pattern = "medium_transformed", full.names = TRUE)

# Create a named list with the file names (without extension) as names and the content as values
file_contents <- sapply(transformed_txt_files, function(file) {
  readLines(file, warn = FALSE) %>% paste(collapse = "\n")  # Read and combine lines
}, USE.NAMES = TRUE)

# Extract the text_id from file names
names(file_contents) <- gsub(".*_(\\d+)\\.txt$", "\\1", basename(transformed_txt_files))

# Add the text column to the metadata dataframe by matching text_id to the file name
full_speeches <- metadata %>%
  mutate(text = file_contents[as.character(text_id)])

# full_speeches %>% select(text_id, text) %>% View()

tidy_speeches = full_speeches %>% 
  select(text_id, text, Country, ISO2, ISO3, Gender, region, LDC, SIDS_UNCTAD_plus, LLDC) %>% 
  unnest_tokens(word, text)


if(F){
  data(stop_words)
  tidy_speeches <- tidy_speeches %>% anti_join(stop_words)
}


total_speeches = tidy_speeches%>%filter(!is.na(word))%>%summarize(n_distinct(ISO3)) %>% pull(`n_distinct(ISO3)`) 

top200 = tidy_speeches %>%
  filter(!is.na(word)) %>% 
  count(word, sort = TRUE) %>%
  mutate(count_per_speech = (n /total_speeches)) %>% 
  slice_max(count_per_speech, n = 200) %>% 
  rename(all_absolute=n,
         all=count_per_speech) 

# Count word occurrences by Gender
word_counts_by_gender <- tidy_speeches %>%
  filter(!is.na(word)) %>% 
  group_by(word, Gender) %>%
  count(name = "count") %>%
  left_join(tidy_speeches %>%
              filter(!is.na(word))%>%
              group_by(Gender) %>%
              summarize(total_speeches = n_distinct(ISO3)),
            by = "Gender") %>%
  mutate(count_per_speech = count / total_speeches) %>%
  select(-count, -total_speeches) %>% 
  pivot_wider(names_from = Gender, values_from = count_per_speech, values_fill = list(count_per_speech = 0))

# By region
word_counts_by_region <- tidy_speeches %>%
  filter(!is.na(word)) %>% 
  group_by(word, region) %>%
  count(name = "count") %>%
  left_join(tidy_speeches %>%
              filter(!is.na(word)) %>%
              group_by(region) %>%
              summarize(total_speeches = n_distinct(ISO3)),
            by = "region") %>%
  mutate(count_per_speech = count / total_speeches) %>%
  select(-count, -total_speeches) %>% 
  pivot_wider(names_from = region, values_from = count_per_speech, values_fill = list(count_per_speech = 0)) %>% 
  select(-other) %>% 
  relocate(`D'ing A&O`) %>% relocate(Developed) %>% relocate(word)

# By LDC
word_counts_by_LDC <- tidy_speeches %>%
  filter(!is.na(word)) %>% 
  group_by(word, LDC) %>%
  count(name = "count") %>%
  left_join(tidy_speeches %>%
              filter(!is.na(word)) %>%
              group_by(LDC) %>%
              summarize(total_speeches = n_distinct(ISO3)),
            by = "LDC") %>%
  mutate(count_per_speech = count / total_speeches) %>%
  select(-count, -total_speeches) %>% 
  pivot_wider(names_from = LDC, values_from = count_per_speech, values_fill = list(count_per_speech = 0)) %>% 
  select(-`NA`, -`0`) %>% 
  rename(LDC = `1`)

# By LLDC
word_counts_by_LLDC <- tidy_speeches %>%
  filter(!is.na(word)) %>% 
  group_by(word, LLDC) %>%
  count(name = "count") %>%
  left_join(tidy_speeches %>%
              filter(!is.na(word)) %>%
              group_by(LLDC) %>%
              summarize(total_speeches = n_distinct(ISO3)),
            by = "LLDC") %>%
  mutate(count_per_speech = count / total_speeches) %>%
  select(-count, -total_speeches) %>% 
  pivot_wider(names_from = LLDC, values_from = count_per_speech, values_fill = list(count_per_speech = 0)) %>% 
  select(-`NA`, -`0`) %>% 
  rename(LLDC = `1`)

# By SIDS
word_counts_by_SIDS <- tidy_speeches %>%
  filter(!is.na(word)) %>% 
  group_by(word, SIDS_UNCTAD_plus) %>%
  count(name = "count") %>%
  left_join(tidy_speeches %>%
              filter(!is.na(word)) %>%
              group_by(SIDS_UNCTAD_plus) %>%
              summarize(total_speeches = n_distinct(ISO3)),
            by = "SIDS_UNCTAD_plus") %>%
  mutate(count_per_speech = count / total_speeches) %>%
  select(-count, -total_speeches) %>% 
  pivot_wider(names_from = SIDS_UNCTAD_plus, values_from = count_per_speech, values_fill = list(count_per_speech = 0)) %>% 
  select(-`NA`, -`0`) %>% 
  rename(SIDS = `1`)


# Join top 200 words with counts by gender
top200 <- top200 %>%
  left_join(word_counts_by_gender, by = "word") %>% 
  left_join(word_counts_by_region, by="word") %>% 
  left_join(word_counts_by_LDC, by = "word") %>% 
  left_join(word_counts_by_LLDC, by = "word") %>% 
  left_join(word_counts_by_SIDS, by = "word")
  

saveRDS(top200, file = "r_helper_objects/top200.RDS")
write.csv(top200, file="../csv_outputs/top200(counts_per_speech).csv", row.names = F)

top200_plot = tidy_speeches %>%
  filter(!is.na(word)) %>% 
  count(word, sort = TRUE) %>%
  slice_max(n, n = 200) %>% 
  mutate(word = reorder(word, n)) %>%
  ggplot(aes(n, word)) +
  geom_col() +
  labs(y = NULL) +
  theme_minimal()

sum_words <- tidy_speeches %>%
  filter(!is.na(word)) %>%
  count(ISO3, word, sort = TRUE)

total_words <- sum_words %>% 
  group_by(ISO3) %>% 
  summarize(total = sum(n)) %>% 
  ungroup()

sum_words <- left_join(sum_words, total_words)

speeches_tf_idf <- sum_words %>%
  bind_tf_idf(word, ISO3, n) %>% 
  left_join(metadata %>% select(ISO3,ISO2, Country), by="ISO3") %>% 
  filter(!is.na(word))

speeches_tf_idf %>% 
  select(-total) %>%
  arrange(desc(tf_idf))

saveRDS(speeches_tf_idf, file = "r_helper_objects/speeches_tf_idf.RDS")
saveRDS(speeches_tf_idf, file = "tf-idf/speeches_tf_idf.RDS")


# levels(df$word_ISO3)
#df %>%
#  ggplot(aes(tf_idf, word_ISO3, fill = ISO3)) +
#  geom_col(show.legend = FALSE) +
#  facet_wrap(~ISO3, ncol = 4, scales = "free") +
#  labs(x = "tf-idf", y = NULL)

# create tf_idf_gender
# Separate male and female documents
group_tf_idf = function(variable="Gender"){ # variable = "region"
  subgroups = metadata[[variable]] %>% unique() %>% .[. != ""]
  subgroups <- subgroups[subgroups != "other"]
  df = data.frame()
  for(subgroup in subgroups){
    grouping = c(metadata %>% filter(!!sym(variable)==subgroup) %>% pull(ISO3))
    grouping_words <- sum_words %>%
      filter(!c(word %in% remove_list)) %>% 
      filter(!is.na(word)) %>% 
      filter(ISO3 %in% grouping)
    anti_grouping_words <- sum_words %>%
      filter(!is.na(word)) %>% 
      filter(!c(word %in% remove_list)) %>% 
      filter(!c(ISO3 %in% grouping))
    
    # Calculate IDF based only on e.g. male speeches
    grouping_tf <- grouping_words %>%
      bind_tf_idf(word, ISO3, n) %>%
      select(ISO3, word, tf)  %>%
      complete(ISO3, word, fill = list(tf = 0))
    anti_grouping_idf <- anti_grouping_words %>%
      rbind(grouping_words %>% 
              group_by(word) %>% 
              summarise(n=mean(n), total=mean(total)) %>% 
              ungroup() %>% 
              mutate(ISO3="grouping")) %>% 
      bind_tf_idf(word, ISO3, n) %>%
      select(word, idf) %>% 
      distinct(word, idf)
    grouping_tf_idf = left_join(grouping_tf, anti_grouping_idf, by="word")
    grouping_tf_idf$tf_idf = grouping_tf_idf$tf * grouping_tf_idf$idf
    grouping_tf_idf = grouping_tf_idf %>% 
      group_by(word) %>% 
      summarise(
        tf = mean(tf),
        idf = mean(idf),
        tf_idf = mean(tf_idf)
      ) %>% 
      arrange(desc(tf_idf))
    grouping_tf_idf$group = subgroup
    df = rbind(df, grouping_tf_idf)
  }
  df <- df %>%
    group_by(group) %>%
    slice_max(tf_idf, n = 25, with_ties=FALSE) %>%
    mutate(word_group = interaction(word, group, drop = TRUE)) %>%
    group_by(group) %>%
    mutate(word_order = fct_reorder(word_group, tf_idf)) %>%
    ungroup()
  df = df %>% 
    mutate(word_group = factor(word_group, levels=rev(word_group)))
  plot = ggplot(df, aes(x = tf_idf, y = word_group, fill = group)) +
    geom_col(show.legend = FALSE) +
    facet_wrap(~group, nrow=1, scales = "free") +
    labs(x = "tf-idf", y = NULL, title=variable) +
    theme_minimal() +
    scale_x_continuous(breaks = scales::breaks_pretty(n = 2)) +
    theme(axis.text.x = element_text(size = 8)) +
    scale_y_discrete(labels = function(labels) gsub("\\..*", "", labels))
  
  return(plot)
}

# plots by subgroup
gender_tf_idf = group_tf_idf(variable = "Gender") 
saveRDS(gender_tf_idf, file = "r_helper_objects/gender_tf_idf.RDS") 

region_tf_idf = group_tf_idf(variable = "region") 
saveRDS(region_tf_idf, file = "r_helper_objects/region_tf_idf.RDS")

LDC_tf_idf = group_tf_idf(variable = "LDC") 
saveRDS(LDC_tf_idf, file = "r_helper_objects/LDC_tf_idf.RDS")

LLDC_tf_idf = group_tf_idf(variable = "LLDC")
saveRDS(LLDC_tf_idf, file = "r_helper_objects/LLDC_tf_idf.RDS")

SIDS_UNCTAD_plus_tf_idf = group_tf_idf(variable = "SIDS_UNCTAD_plus") 
saveRDS(SIDS_UNCTAD_plus_tf_idf, file = "r_helper_objects/SIDS_UNCTAD_plus_tf_idf.RDS")

# bind
# agregate by mean country
